[
  {
    "path": "/pet/{petId}/uploadImage",
    "method": "post",
    "operationId": "uploadFile",
    "parameters": [
      {
        "name": "petId",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "ID of pet to update"
      },
      {
        "name": "additionalMetadata",
        "in": "formData",
        "required": false,
        "type": "string",
        "description": "Additional data to pass to server"
      },
      {
        "name": "file",
        "in": "formData",
        "required": false,
        "type": "file",
        "description": "file to upload"
      }
    ],
    "responses": {
      "200": {
        "description": "successful operation",
        "schema": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "format": "int32"
            },
            "type": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          }
        }
      }
    },
    "isOData": false,
    "responseSchema": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  {
    "path": "/pet",
    "method": "post",
    "operationId": "addPet",
    "parameters": [
      {
        "name": "body",
        "in": "body",
        "required": true,
        "description": "Pet object that needs to be added to the store"
      }
    ],
    "responses": {
      "405": {
        "description": "Invalid input"
      }
    },
    "isOData": false,
    "responseSchema": null
  },
  {
    "path": "/pet",
    "method": "put",
    "operationId": "updatePet",
    "parameters": [
      {
        "name": "body",
        "in": "body",
        "required": true,
        "description": "Pet object that needs to be added to the store"
      }
    ],
    "responses": {
      "400": {
        "description": "Invalid ID supplied"
      },
      "404": {
        "description": "Pet not found"
      },
      "405": {
        "description": "Validation exception"
      }
    },
    "isOData": false,
    "responseSchema": null
  },
  {
    "path": "/pet/findByStatus",
    "method": "get",
    "operationId": "findPetsByStatus",
    "parameters": [
      {
        "name": "status",
        "in": "query",
        "required": true,
        "type": "array",
        "description": "Status values that need to be considered for filter"
      }
    ],
    "responses": {
      "200": {
        "description": "successful operation",
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "photoUrls"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "category": {
                "$ref": "#/definitions/Category"
              },
              "name": {
                "type": "string",
                "example": "doggie"
              },
              "photoUrls": {
                "type": "array",
                "xml": {
                  "wrapped": true
                },
                "items": {
                  "type": "string",
                  "xml": {
                    "name": "photoUrl"
                  }
                }
              },
              "tags": {
                "type": "array",
                "xml": {
                  "wrapped": true
                },
                "items": {
                  "xml": {
                    "name": "tag"
                  },
                  "$ref": "#/definitions/Tag"
                }
              },
              "status": {
                "type": "string",
                "description": "pet status in the store",
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ]
              }
            },
            "xml": {
              "name": "Pet"
            }
          }
        }
      },
      "400": {
        "description": "Invalid status value"
      }
    },
    "isOData": false,
    "responseSchema": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/definitions/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "tag"
              },
              "$ref": "#/definitions/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "Pet"
        }
      }
    }
  },
  {
    "path": "/pet/findByTags",
    "method": "get",
    "operationId": "findPetsByTags",
    "parameters": [
      {
        "name": "tags",
        "in": "query",
        "required": true,
        "type": "array",
        "description": "Tags to filter by"
      }
    ],
    "responses": {
      "200": {
        "description": "successful operation",
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "photoUrls"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "category": {
                "$ref": "#/definitions/Category"
              },
              "name": {
                "type": "string",
                "example": "doggie"
              },
              "photoUrls": {
                "type": "array",
                "xml": {
                  "wrapped": true
                },
                "items": {
                  "type": "string",
                  "xml": {
                    "name": "photoUrl"
                  }
                }
              },
              "tags": {
                "type": "array",
                "xml": {
                  "wrapped": true
                },
                "items": {
                  "xml": {
                    "name": "tag"
                  },
                  "$ref": "#/definitions/Tag"
                }
              },
              "status": {
                "type": "string",
                "description": "pet status in the store",
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ]
              }
            },
            "xml": {
              "name": "Pet"
            }
          }
        }
      },
      "400": {
        "description": "Invalid tag value"
      }
    },
    "isOData": false,
    "responseSchema": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/definitions/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "xml": {
                "name": "tag"
              },
              "$ref": "#/definitions/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "Pet"
        }
      }
    }
  },
  {
    "path": "/pet/{petId}",
    "method": "get",
    "operationId": "getPetById",
    "parameters": [
      {
        "name": "petId",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "ID of pet to return"
      }
    ],
    "responses": {
      "200": {
        "description": "successful operation",
        "schema": {
          "type": "object",
          "required": [
            "name",
            "photoUrls"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "category": {
              "$ref": "#/definitions/Category"
            },
            "name": {
              "type": "string",
              "example": "doggie"
            },
            "photoUrls": {
              "type": "array",
              "xml": {
                "wrapped": true
              },
              "items": {
                "type": "string",
                "xml": {
                  "name": "photoUrl"
                }
              }
            },
            "tags": {
              "type": "array",
              "xml": {
                "wrapped": true
              },
              "items": {
                "xml": {
                  "name": "tag"
                },
                "$ref": "#/definitions/Tag"
              }
            },
            "status": {
              "type": "string",
              "description": "pet status in the store",
              "enum": [
                "available",
                "pending",
                "sold"
              ]
            }
          },
          "xml": {
            "name": "Pet"
          }
        }
      },
      "400": {
        "description": "Invalid ID supplied"
      },
      "404": {
        "description": "Pet not found"
      }
    },
    "isOData": false,
    "responseSchema": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "wrapped": true
          },
          "items": {
            "type": "string",
            "xml": {
              "name": "photoUrl"
            }
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "wrapped": true
          },
          "items": {
            "xml": {
              "name": "tag"
            },
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      },
      "xml": {
        "name": "Pet"
      }
    }
  },
  {
    "path": "/pet/{petId}",
    "method": "post",
    "operationId": "updatePetWithForm",
    "parameters": [
      {
        "name": "petId",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "ID of pet that needs to be updated"
      },
      {
        "name": "name",
        "in": "formData",
        "required": false,
        "type": "string",
        "description": "Updated name of the pet"
      },
      {
        "name": "status",
        "in": "formData",
        "required": false,
        "type": "string",
        "description": "Updated status of the pet"
      }
    ],
    "responses": {
      "405": {
        "description": "Invalid input"
      }
    },
    "isOData": false,
    "responseSchema": null
  },
  {
    "path": "/pet/{petId}",
    "method": "delete",
    "operationId": "deletePet",
    "parameters": [
      {
        "name": "api_key",
        "in": "header",
        "required": false,
        "type": "string"
      },
      {
        "name": "petId",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Pet id to delete"
      }
    ],
    "responses": {
      "400": {
        "description": "Invalid ID supplied"
      },
      "404": {
        "description": "Pet not found"
      }
    },
    "isOData": false,
    "responseSchema": null
  },
  {
    "path": "/store/inventory",
    "method": "get",
    "operationId": "getInventory",
    "parameters": [],
    "responses": {
      "200": {
        "description": "successful operation",
        "schema": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "isOData": false,
    "responseSchema": {
      "type": "object",
      "additionalProperties": {
        "type": "integer",
        "format": "int32"
      }
    }
  },
  {
    "path": "/store/order",
    "method": "post",
    "operationId": "placeOrder",
    "parameters": [
      {
        "name": "body",
        "in": "body",
        "required": true,
        "description": "order placed for purchasing the pet"
      }
    ],
    "responses": {
      "200": {
        "description": "successful operation",
        "schema": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "petId": {
              "type": "integer",
              "format": "int64"
            },
            "quantity": {
              "type": "integer",
              "format": "int32"
            },
            "shipDate": {
              "type": "string",
              "format": "date-time"
            },
            "status": {
              "type": "string",
              "description": "Order Status",
              "enum": [
                "placed",
                "approved",
                "delivered"
              ]
            },
            "complete": {
              "type": "boolean"
            }
          },
          "xml": {
            "name": "Order"
          }
        }
      },
      "400": {
        "description": "Invalid Order"
      }
    },
    "isOData": false,
    "responseSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Order"
      }
    }
  },
  {
    "path": "/store/order/{orderId}",
    "method": "get",
    "operationId": "getOrderById",
    "parameters": [
      {
        "name": "orderId",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "ID of pet that needs to be fetched"
      }
    ],
    "responses": {
      "200": {
        "description": "successful operation",
        "schema": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "petId": {
              "type": "integer",
              "format": "int64"
            },
            "quantity": {
              "type": "integer",
              "format": "int32"
            },
            "shipDate": {
              "type": "string",
              "format": "date-time"
            },
            "status": {
              "type": "string",
              "description": "Order Status",
              "enum": [
                "placed",
                "approved",
                "delivered"
              ]
            },
            "complete": {
              "type": "boolean"
            }
          },
          "xml": {
            "name": "Order"
          }
        }
      },
      "400": {
        "description": "Invalid ID supplied"
      },
      "404": {
        "description": "Order not found"
      }
    },
    "isOData": false,
    "responseSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Order"
      }
    }
  },
  {
    "path": "/store/order/{orderId}",
    "method": "delete",
    "operationId": "deleteOrder",
    "parameters": [
      {
        "name": "orderId",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "ID of the order that needs to be deleted"
      }
    ],
    "responses": {
      "400": {
        "description": "Invalid ID supplied"
      },
      "404": {
        "description": "Order not found"
      }
    },
    "isOData": false,
    "responseSchema": null
  },
  {
    "path": "/user/createWithList",
    "method": "post",
    "operationId": "createUsersWithListInput",
    "parameters": [
      {
        "name": "body",
        "in": "body",
        "required": true,
        "type": "array",
        "description": "List of user object"
      }
    ],
    "responses": {
      "default": {
        "description": "successful operation"
      }
    },
    "isOData": false,
    "responseSchema": null
  },
  {
    "path": "/user/{username}",
    "method": "get",
    "operationId": "getUserByName",
    "parameters": [
      {
        "name": "username",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "The name that needs to be fetched. Use user1 for testing. "
      }
    ],
    "responses": {
      "200": {
        "description": "successful operation",
        "schema": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "username": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "userStatus": {
              "type": "integer",
              "format": "int32",
              "description": "User Status"
            }
          },
          "xml": {
            "name": "User"
          }
        }
      },
      "400": {
        "description": "Invalid username supplied"
      },
      "404": {
        "description": "User not found"
      }
    },
    "isOData": false,
    "responseSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    }
  },
  {
    "path": "/user/{username}",
    "method": "put",
    "operationId": "updateUser",
    "parameters": [
      {
        "name": "username",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "name that need to be updated"
      },
      {
        "name": "body",
        "in": "body",
        "required": true,
        "description": "Updated user object"
      }
    ],
    "responses": {
      "400": {
        "description": "Invalid user supplied"
      },
      "404": {
        "description": "User not found"
      }
    },
    "isOData": false,
    "responseSchema": null
  },
  {
    "path": "/user/{username}",
    "method": "delete",
    "operationId": "deleteUser",
    "parameters": [
      {
        "name": "username",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "The name that needs to be deleted"
      }
    ],
    "responses": {
      "400": {
        "description": "Invalid username supplied"
      },
      "404": {
        "description": "User not found"
      }
    },
    "isOData": false,
    "responseSchema": null
  },
  {
    "path": "/user/login",
    "method": "get",
    "operationId": "loginUser",
    "parameters": [
      {
        "name": "username",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "The user name for login"
      },
      {
        "name": "password",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "The password for login in clear text"
      }
    ],
    "responses": {
      "200": {
        "description": "successful operation",
        "schema": {
          "type": "string"
        }
      },
      "400": {
        "description": "Invalid username/password supplied"
      }
    },
    "isOData": false,
    "responseSchema": {
      "type": "string"
    }
  },
  {
    "path": "/user/logout",
    "method": "get",
    "operationId": "logoutUser",
    "parameters": [],
    "responses": {
      "default": {
        "description": "successful operation"
      }
    },
    "isOData": false,
    "responseSchema": null
  },
  {
    "path": "/user/createWithArray",
    "method": "post",
    "operationId": "createUsersWithArrayInput",
    "parameters": [
      {
        "name": "body",
        "in": "body",
        "required": true,
        "type": "array",
        "description": "List of user object"
      }
    ],
    "responses": {
      "default": {
        "description": "successful operation"
      }
    },
    "isOData": false,
    "responseSchema": null
  },
  {
    "path": "/user",
    "method": "post",
    "operationId": "createUser",
    "parameters": [
      {
        "name": "body",
        "in": "body",
        "required": true,
        "description": "Created user object"
      }
    ],
    "responses": {
      "default": {
        "description": "successful operation"
      }
    },
    "isOData": false,
    "responseSchema": null
  }
]